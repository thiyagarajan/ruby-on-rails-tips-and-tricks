rails 3 rollback migration
===========================
rake db:rollback

through capistrano
namespace :db do
   desc 'Rolls the schema back to the previous version. Specify the number of steps with STEP=n'
   task :rollback => :environment do
     step = ENV['STEP'] ? ENV['STEP'].to_i : 1
     version = ActiveRecord::Migrator.current_version - step
     ActiveRecord::Migrator.migrate('db/migrate/', version)
   end
 end

sendmail configure
================
config.action_mailer.raise_delivery_errors = true
ActionMailer::Base.delivery_method = :sendmail
ActionMailer::Base.sendmail_settings = {
    :location       => '/usr/sbin/sendmail',
    :arguments      => '-i -t'
}

Helper to print numbers as ordinals (1st, 2nd, 3rd...)
======================================

def number_to_ordinal(num)
  num = num.to_i
  if (10...20)===num
    "#{num}th"
  else
    g = %w{ th st nd rd th th th th th th }
    a = num.to_s
    c=a[-1..-1].to_i
    a + g[c]
  end
end

number_to_ordinal(12) => "12th"
number_to_ordinal(7) => "7th"

uninitialized constant UsersController
============================
Add following line into routes
map.resources :users, :controller => 'user'

simple form submission
==================
<% form_for @users do |f|  %>
<%= f.text_field :name %><br/>
<%=  f.text_field :email %><br/>
<%= f.text_field :country %><br/>
<%= f.submit 'save' %>
<% end %>

simple create method
================
def new
    @users = User.new
  end

  def create
    @users = User.new(params[:user])
    #render :text => params.inspect and return
    if @users.save
      redirect_to root_path
      flash[:notice]="saved successfully"
    end
  end

render
==========
render :action => "action"
render :action => "action", :layout => "layoutname"
render :file => "filepath"
render :file => "filepath", :use_full_path => false
render :inline => "<%= 'hello' %>"
render :inline => "<%= 'hello' %>", :locals => { :name => "value" }
render :inline => "<%= 'hello' %>", :type => :rxml
render :layout => "layoutname"
render :nothing => true
render :nothing => true, :status => 401
render :partial => "item"
render :partial => "item", :collection => items
render :partial => "item", :locals => { :name => "value" }
render :partial => "item", :object => object
render :partial => "item", :status => 500
render :text => "text to render..."
render :text => "text to render...", :layout => "layoutname"
render :text => "text to render...", :layout => true
render :text => "text to render...", :status => 401
render_component :action => "index"
render_component :controller => "items"
render_component :controller => "items", :action => "index"
verify :only => [:], :method => :post, :render => {:status => 500, :text => "use HTTP-POST"}
verify :only => [:], :session => :user, :params => :id, :redirect_to => {:action => 'index'}

pagination numbers adding in typus admin
===============================
app\views\admin\helpers\_pagination.html.erb

<div class="pagination">

  <% if @items.prev? %>
    <%= link_to "&larr; " + _("Previous"), params.merge(:page => @items.prev.number, :anchor => @options[:anchor]) %>
  <% else %>
    <span class="disabled"><%= "&larr; " + _("Previous") %></span>
  <% end %>

  <% last_page = 0 -%>

  <% build_pagination(@pager) do |n| -%>
    <% if @items.number == n -%>
      <span class="current"><%= n %></span>
    <% else -%>
      <%= "..." if last_page + 1 < n %>
      <%= link_to n, params.merge(:page => n, :anchor => @options[:anchor]) %>
    <% end -%>
    <% last_page = n -%>

  <% end -%>

  <% if @items.next? %>
    <%= link_to _("Next") + " &rarr;", params.merge(:page => @items.next.number, :anchor => @options[:anchor]) %>
  <% else %>
    <span class="disabled"><%= _("Next") + " &rarr;" %></span>
  <% end %>

</div>

app\helpers\admin\master_helper.rb

##
  # Simple and clean pagination links
  #
  def build_pagination(pager, options = {})

    options[:link_to_current_page] ||= true
    options[:always_show_anchors] ||= true

    # Calculate the window start and end pages
    options[:padding] ||= 2
    options[:padding] = options[:padding] < 0 ? 0 : options[:padding]

    page = params[:page].blank? ? 1 : params[:page].to_i
    current_page = pager.page(page)

    first = pager.first.number <= (current_page.number - options[:padding]) && pager.last.number >= (current_page.number - options[:padding]) ? current_page.number - options[:padding] : 1
    last = pager.first.number <= (current_page.number + options[:padding]) && pager.last.number >= (current_page.number + options[:padding]) ? current_page.number + options[:padding] : pager.last.number

    returning(String.new) do |html|
      # Print start page if anchors are enabled
      html << yield(1) if options[:always_show_anchors] and not first == 1
      # Print window pages
      first.upto(last) do |page|
        (current_page.number == page && !options[:link_to_current_page]) ? html << page.to_s : html << (yield(page)).to_s
      end
      # Print end page if anchors are enabled
      html << yield(pager.last.number).to_s if options[:always_show_anchors] and not last == pager.last.number
    end

  end